{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\styli\\\\OneDrive\\\\Desktop\\\\Ascessment\\\\my-app\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AudioPlayer from './components/AudioPlayer';\nimport Playlist from './components/Playlist';\nimport NowPlaying from './components/NowPlaying';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  var _files$currentFileInd;\n  const [files, setFiles] = useState([]);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n  useEffect(() => {\n    // Fetch files from local storage or server and update the state\n    // For simplicity, let's assume you have a function fetchFiles() to get the files.\n    const fetchedFiles = fetchFiles();\n    setFiles(fetchedFiles);\n\n    // Load last playing audio file and position from local storage\n    const lastPlayingFileIndex = localStorage.getItem('lastPlayingFileIndex');\n    setCurrentFileIndex(lastPlayingFileIndex ? parseInt(lastPlayingFileIndex) : 0);\n  }, []);\n  const handlePlay = index => {\n    setCurrentFileIndex(index);\n    // Save current playing file index to local storage\n    localStorage.setItem('lastPlayingFileIndex', index);\n  };\n  const handleEnded = () => {\n    // Play the next file in the playlist\n    setCurrentFileIndex(prevIndex => (prevIndex + 1) % files.length);\n  };\n  return /*#__PURE__*/_jsxDEV(Router, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"app-container\",\n      children: /*#__PURE__*/_jsxDEV(Switch, {\n        children: [/*#__PURE__*/_jsxDEV(Route, {\n          path: \"/playlist\",\n          children: /*#__PURE__*/_jsxDEV(Playlist, {\n            files: files,\n            onPlay: handlePlay\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Route, {\n          path: \"/now-playing\",\n          children: [/*#__PURE__*/_jsxDEV(NowPlaying, {\n            currentFile: files[currentFileIndex]\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AudioPlayer, {\n            src: (_files$currentFileInd = files[currentFileIndex]) === null || _files$currentFileInd === void 0 ? void 0 : _files$currentFileInd.url,\n            onEnded: handleEnded\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"N+Gg/sQHLVqg/lg5CRc6cJH4Hvc=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","BrowserRouter","Router","Route","Switch","AudioPlayer","Playlist","NowPlaying","jsxDEV","_jsxDEV","App","_s","_files$currentFileInd","files","setFiles","currentFileIndex","setCurrentFileIndex","fetchedFiles","fetchFiles","lastPlayingFileIndex","localStorage","getItem","parseInt","handlePlay","index","setItem","handleEnded","prevIndex","length","children","className","path","onPlay","fileName","_jsxFileName","lineNumber","columnNumber","currentFile","src","url","onEnded","_c","$RefreshReg$"],"sources":["C:/Users/styli/OneDrive/Desktop/Ascessment/my-app/src/index.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport AudioPlayer from './components/AudioPlayer';\nimport Playlist from './components/Playlist';\nimport NowPlaying from './components/NowPlaying';\nimport './App.css';\n\nconst App = () => {\n  const [files, setFiles] = useState([]);\n  const [currentFileIndex, setCurrentFileIndex] = useState(0);\n\n  useEffect(() => {\n    // Fetch files from local storage or server and update the state\n    // For simplicity, let's assume you have a function fetchFiles() to get the files.\n    const fetchedFiles = fetchFiles();\n    setFiles(fetchedFiles);\n\n    // Load last playing audio file and position from local storage\n    const lastPlayingFileIndex = localStorage.getItem('lastPlayingFileIndex');\n    setCurrentFileIndex(lastPlayingFileIndex ? parseInt(lastPlayingFileIndex) : 0);\n  }, []);\n\n  const handlePlay = (index) => {\n    setCurrentFileIndex(index);\n    // Save current playing file index to local storage\n    localStorage.setItem('lastPlayingFileIndex', index);\n  };\n\n  const handleEnded = () => {\n    // Play the next file in the playlist\n    setCurrentFileIndex((prevIndex) => (prevIndex + 1) % files.length);\n  };\n\n  return (\n    <Router>\n      <div className=\"app-container\">\n        <Switch>\n          <Route path=\"/playlist\">\n            <Playlist files={files} onPlay={handlePlay} />\n          </Route>\n          <Route path=\"/now-playing\">\n            <NowPlaying currentFile={files[currentFileIndex]} />\n            <AudioPlayer\n              src={files[currentFileIndex]?.url}\n              onEnded={handleEnded}\n            />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}